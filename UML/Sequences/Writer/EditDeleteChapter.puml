@startuml
!theme vibrant

title Sequence Diagram: Chapter Management (Create, Edit, Delete)

actor "Writer" as User
participant "Browser" as Browser
participant "API Gateway" as Gateway
participant "Chapter Service" as ChapterService
database "ChapterDB" as ChapterDB
participant "Logging Service" as LoggingService

activate Browser
User -> Browser : Navigates to a specific book's page
' ... The list of chapters for the book is fetched and displayed ...
Browser -> User : Displays list of chapters

alt User chooses to Create a New Chapter

    User -> Browser : Clicks "Add New Chapter"
    Browser -> User : Displays input field for chapter name
    User -> Browser : Enters name and clicks "Create"
    Browser ->> Gateway : POST /api/v1/books/{bookId}/chapters\n(Authorization: Bearer JWT, {name: "..."})
    activate Gateway

    Gateway ->> ChapterService : createChapter(userId, bookId, chapterData)
    activate ChapterService

    alt Chapter name is valid (not empty)
        ChapterService ->> ChapterDB : save(newChapterDocument)
        activate ChapterDB
        ChapterDB -->> ChapterService : New Chapter Document
        deactivate ChapterDB
        ChapterService -->> Gateway : 201 Created { newChapter }
        
        ' Asynchronous Logging
        ChapterService ->> LoggingService : logEvent('CHAPTER_CREATED', {userId, bookId, chapterId})
        activate LoggingService
        deactivate LoggingService

        Gateway -->> Browser : 201 Created
        Browser -> User : Displays "Chapter created" and adds it to the list
    else Chapter name is invalid
        ChapterService -->> Gateway : 400 Bad Request { error: "Chapter name cannot be empty" }
        Gateway -->> Browser : 400 Bad Request
        Browser -> User : Displays validation error
    end
    deactivate ChapterService
    deactivate Gateway

else User chooses to Edit a Chapter Name

    User -> Browser : Clicks "Edit name" on a chapter
    User -> Browser : Modifies name and clicks "Save"
    Browser ->> Gateway : PUT /api/v1/chapters/{chapterId}\n(Authorization: Bearer JWT, {name: "New Name"})
    activate Gateway
    Gateway ->> ChapterService : updateChapter(userId, chapterId, {name: "New Name"})
    activate ChapterService
    
    ChapterService ->> ChapterDB : findByIdAndUpdate(chapterId, {name: "New Name"})
    activate ChapterDB
    ChapterDB -->> ChapterService : Updated Chapter Document
    deactivate ChapterDB
    ChapterService -->> Gateway : 200 OK
    
    ' Asynchronous Logging
    ChapterService ->> LoggingService : logEvent('CHAPTER_UPDATED', {userId, chapterId, changes})
    activate LoggingService
    deactivate LoggingService

    deactivate ChapterService
    Gateway -->> Browser : 200 OK
    deactivate Gateway
    Browser -> User : Displays "Chapter name updated"

else User chooses to Delete a Chapter

    User -> Browser : Clicks "Delete" on a chapter
    Browser -> User : Displays confirmation dialog
    User -> Browser : Clicks "Confirm"
    Browser ->> Gateway : DELETE /api/v1/chapters/{chapterId}\n(Authorization: Bearer JWT)
    activate Gateway
    Gateway ->> ChapterService : deleteChapter(userId, chapterId)
    activate ChapterService
    
    ChapterService ->> ChapterDB : findByIdAndDelete(chapterId)
    activate ChapterDB
    ChapterDB -->> ChapterService : Success
    deactivate ChapterDB
    ChapterService -->> Gateway : 204 No Content

    ' Asynchronous Logging
    ChapterService ->> LoggingService : logEvent('CHAPTER_DELETED', {userId, chapterId})
    activate LoggingService
    deactivate LoggingService

    deactivate ChapterService
    Gateway -->> Browser : 204 No Content
    deactivate Gateway
    Browser -> User : Displays "Chapter deleted" and removes it from list

end

deactivate Browser
@enduml
