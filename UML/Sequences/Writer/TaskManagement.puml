@startuml
!theme vibrant

title Sequence Diagram: Task Management (Create, Edit, Update Status, Delete)

actor "User"
participant "Browser"
participant "API Gateway" as Gateway
participant "Task Service" as TaskService
database "TaskDB"

User -> Browser : Navigates to the Task Management board
' ... The initial list of tasks is fetched and displayed ...
Browser -> User : Displays list of tasks

alt User chooses to Create a New Task

    User -> Browser : Clicks "Add Task"
    Browser -> User : Displays form for description and due date
    User -> Browser : Fills form and clicks "Save"
    Browser ->> Gateway : POST /api/v1/tasks\n(Authorization: Bearer JWT, {description, dueDate})
    activate Gateway

    Gateway ->> TaskService : createTask(userId, taskData)
    activate TaskService

    alt Due date is provided
        TaskService ->> TaskDB : save(newTaskDocument)
        activate TaskDB
        TaskDB -->> TaskService : New Task Document
        deactivate TaskDB
        TaskService -->> Gateway : 201 Created { newTask }
        Gateway -->> Browser : 201 Created
        Browser -> User : Displays "Task created" and adds it to the list
    else Due date is missing
        TaskService -->> Gateway : 400 Bad Request { error: "Due date is required" }
        Gateway -->> Browser : 400 Bad Request
        Browser -> User : Displays validation error
    end
    deactivate TaskService
    deactivate Gateway

else User chooses to Edit a Task

    User -> Browser : Clicks "Edit" on a task
    ' ... similar flow to create, but using PUT ...
    Browser ->> Gateway : PUT /api/v1/tasks/{taskId}\n(Authorization: Bearer JWT, {description, dueDate})
    ' ... server validates and updates ...
    Gateway -->> Browser : 200 OK
    Browser -> User : Displays "Task updated"

else User chooses to Quickly Change Status

    User -> Browser : Clicks a status toggle (e.g., "Mark as Done")
    Browser ->> Gateway : PATCH /api/v1/tasks/{taskId}/status\n(Authorization: Bearer JWT, {status: "Done"})
    activate Gateway
    Gateway ->> TaskService : updateTaskStatus(userId, taskId, newStatus)
    activate TaskService
    TaskService -> TaskService : Verify user has permission
    alt User has permission
        TaskService ->> TaskDB : findByIdAndUpdate(taskId, {status: "Done"})
        TaskDB -->> TaskService : Updated Task Document
        TaskService -->> Gateway : 200 OK
        Gateway -->> Browser : 200 OK
        Browser -> User : Updates the task's visual status in the list
    else User lacks permission
        TaskService -->> Gateway : 403 Forbidden
        Gateway -->> Browser : 403 Forbidden
        Browser -> User : Displays "Update failed"
    end
    deactivate TaskService
    deactivate Gateway

else User chooses to Delete a Task

    User -> Browser : Clicks "Delete" on a task
    Browser -> User : Displays confirmation dialog
    User -> Browser : Clicks "Confirm"
    Browser ->> Gateway : DELETE /api/v1/tasks/{taskId}\n(Authorization: Bearer JWT)
    ' ... server verifies permissions and deletes ...
    Gateway -->> Browser : 204 No Content
    Browser -> User : Displays "Task deleted" and removes it from list

end

@enduml
