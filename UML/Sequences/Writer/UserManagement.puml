@startuml
!theme vibrant

title Sequence Diagram: User Management by a Manager

actor "Writer Manager" as Manager
participant "Browser"
participant "API Gateway" as Gateway
participant "Project Service" as ProjectService
database "ProjectDB / UserDB" as ProjectDB
participant "Logging Service" as LoggingService

activate Browser
Manager -> Browser : Navigates to project's User Management page
' ... The list of users associated with the project is fetched and displayed ...
Browser -> Manager : Displays list of project users

alt Manager chooses to Add a New User to Project

    Manager -> Browser : Clicks "Add User"
    Browser -> Manager : Displays form for user email and project role
    Manager -> Browser : Fills form and clicks "Invite"
    Browser ->> Gateway : POST /api/v1/projects/{projectId}/users\n(Authorization: Bearer JWT, {email, role})
    activate Gateway
    Gateway ->> ProjectService : inviteUserToProject(managerId, projectId, inviteData)
    activate ProjectService
    
    ProjectService -> ProjectService : Verify manager has permission for this project
    alt Manager has permissions
        ProjectService ->> ProjectDB : Add user association to project document
        activate ProjectDB
        ProjectDB -->> ProjectService : Success
        deactivate ProjectDB
        ProjectService -->> Gateway : 200 OK { message: "Invitation sent" }
        
        ' Asynchronous Logging
        ProjectService ->> LoggingService : logEvent('USER_ADDED_TO_PROJECT', {managerId, projectId, invitedUserId})
        activate LoggingService
        deactivate LoggingService

        Gateway -->> Browser : 200 OK
        Browser -> Manager : Displays "User invited successfully"
    else Manager lacks permissions
        ProjectService -->> Gateway : 403 Forbidden
        Gateway -->> Browser : 403 Forbidden
        Browser -> Manager : Displays error message
    end
    deactivate ProjectService
    deactivate Gateway

else Manager chooses to Edit a User's Role

    Manager -> Browser : Clicks "Edit Role" on a user
    Manager -> Browser : Changes role and clicks "Save"
    Browser ->> Gateway : PUT /api/v1/projects/{projectId}/users/{userId}\n(Authorization: Bearer JWT, {role: "Editor"})
    activate Gateway
    Gateway ->> ProjectService : updateUserRole(managerId, projectId, userId, {role: "Editor"})
    activate ProjectService
    ProjectService ->> ProjectDB : updateUserAssociation(projectId, userId, {role: "Editor"})
    activate ProjectDB
    ProjectDB -->> ProjectService : Success
    deactivate ProjectDB
    ProjectService -->> Gateway : 200 OK
    
    ' Asynchronous Logging
    ProjectService ->> LoggingService : logEvent('USER_ROLE_UPDATED', {managerId, projectId, userId})
    activate LoggingService
    deactivate LoggingService

    deactivate ProjectService
    Gateway -->> Browser : 200 OK
    deactivate Gateway
    Browser -> Manager : Displays "User role updated"

else Manager chooses to Remove a User from Project

    Manager -> Browser : Clicks "Remove" on a user
    Browser -> Manager : Displays confirmation dialog
    Manager -> Browser : Clicks "Confirm"
    Browser ->> Gateway : DELETE /api/v1/projects/{projectId}/users/{userId}\n(Authorization: Bearer JWT)
    activate Gateway
    Gateway ->> ProjectService : removeUserFromProject(managerId, projectId, userId)
    activate ProjectService
    ProjectService ->> ProjectDB : removeUserAssociation(projectId, userId)
    activate ProjectDB
    ProjectDB -->> ProjectService : Success
    deactivate ProjectDB
    ProjectService -->> Gateway : 204 No Content
    
    ' Asynchronous Logging
    ProjectService ->> LoggingService : logEvent('USER_REMOVED_FROM_PROJECT', {managerId, projectId, userId})
    activate LoggingService
    deactivate LoggingService

    deactivate ProjectService
    Gateway -->> Browser : 204 No Content
    deactivate Gateway
    Browser -> Manager : Displays "User removed from project" and updates list

end
deactivate Browser
@enduml
